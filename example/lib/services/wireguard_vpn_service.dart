import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_v2ray/flutter_v2ray.dart';
import '../models/vpn_key.dart';
import 'vpn_service_interface.dart';

class WireGuardVpnService implements VpnServiceInterface {
  late FlutterV2ray _flutterV2ray;
  Timer? _statusTimer;
  
  @override
  final ValueNotifier<V2RayStatus> statusNotifier = ValueNotifier(V2RayStatus());
  
  @override
  final ValueNotifier<bool> isConnecting = ValueNotifier(false);
  
  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  bool _isConnected = false;
  String? _currentConfig;
  String? _currentRemark;
  DateTime? _connectionStartTime;
  
  @override
  Future<void> init() async {
    _flutterV2ray = FlutterV2ray(
      onStatusChanged: (status) {
        statusNotifier.value = status;
        _isConnected = status.state == "CONNECTED";
      },
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º V2Ray (—ç—Ç–æ —Ç–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç VPN –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ iOS)
    await _flutterV2ray.initializeV2Ray();
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è VPN
    await _flutterV2ray.requestPermission();
    
    debugPrint('WireGuard VPN Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    statusNotifier.value = V2RayStatus(
      state: "DISCONNECTED",
      duration: "00:00:00",
      uploadSpeed: 0,
      downloadSpeed: 0,
      upload: 0,
      download: 0,
    );
  }
  
  @override
  Future<bool> connect(VpnKey vpnKey) async {
    try {
      isConnecting.value = true;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      if (!isValidWireGuardConfig(vpnKey.key)) {
        throw Exception('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
      }
      
      // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      final config = parseWireGuardConfig(vpnKey.key);
      final endpoint = config['Endpoint'];
      
      if (endpoint == null) {
        throw Exception('–ù–µ –Ω–∞–π–¥–µ–Ω Endpoint –≤ WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      }
      
      _currentConfig = vpnKey.key;
      _currentRemark = vpnKey.remark.isNotEmpty ? vpnKey.remark : 'WireGuard';
      _connectionStartTime = DateTime.now();
      
      debugPrint('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WireGuard —Å–µ—Ä–≤–µ—Ä—É: $endpoint');
      debugPrint('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${_currentRemark}');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º V2Ray API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WireGuard VPN
      // –ù–∞ iOS —ç—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NetworkExtension
      await _flutterV2ray.startV2Ray(
        remark: _currentRemark!,
        config: vpnKey.key, // –ü–µ—Ä–µ–¥–∞–µ–º WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        proxyOnly: false, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π VPN —Ç—É–Ω–Ω–µ–ª—å
      );
      
      _isConnected = true;
      isConnecting.value = false;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è WireGuard
      _startWireGuardStatusMonitoring();
      
      debugPrint('‚úÖ WireGuard VPN –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (e) {
      isConnecting.value = false;
      _isConnected = false;
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WireGuard: $e');
      return false;
    }
  }
  
  @override
  Future<void> disconnect() async {
    try {
      isConnecting.value = true;
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
      _statusTimer?.cancel();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VPN —á–µ—Ä–µ–∑ V2Ray API
      await _flutterV2ray.stopV2Ray();
      
      _isConnected = false;
      _currentConfig = null;
      _currentRemark = null;
      _connectionStartTime = null;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      statusNotifier.value = V2RayStatus(
        state: "DISCONNECTED",
        duration: "00:00:00",
        uploadSpeed: 0,
        downloadSpeed: 0,
        upload: 0,
        download: 0,
      );
      
      debugPrint('üîå WireGuard VPN –æ—Ç–∫–ª—é—á–µ–Ω');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WireGuard: $e');
    } finally {
      isConnecting.value = false;
    }
  }
  
  @override
  bool get isConnected => _isConnected;
  
  @override
  Future<int> getServerDelay(String config) async {
    try {
      // –ü–∞—Ä—Å–∏–º WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      final parsedConfig = parseWireGuardConfig(config);
      final endpoint = parsedConfig['Endpoint'];
      
      if (endpoint == null) {
        return -1;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏–∑ endpoint
      final endpointParts = endpoint.split(':');
      if (endpointParts.isEmpty) {
        return -1;
      }
      
      final host = endpointParts[0];
      debugPrint('üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è WireGuard —Å–µ—Ä–≤–µ—Ä–∞: $host');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º V2Ray API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é V2Ray –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      final testConfig = _createTestV2RayConfig(host, endpointParts.length > 1 ? int.tryParse(endpointParts[1]) ?? 51820 : 51820);
      
      return await _flutterV2ray.getServerDelay(
        config: testConfig,
      );
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏: $e');
      return -1;
    }
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–æ–π WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  bool isValidWireGuardConfig(String config) {
    final lowerConfig = config.toLowerCase();
    return lowerConfig.contains('[interface]') && 
           lowerConfig.contains('privatekey') && 
           lowerConfig.contains('[peer]') && 
           lowerConfig.contains('publickey');
  }
  
  /// –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ WireGuard –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Map<String, String> parseWireGuardConfig(String config) {
    final Map<String, String> result = {};
    
    final lines = config.split('\n');
    String currentSection = '';
    
    for (final line in lines) {
      final trimmedLine = line.trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      if (trimmedLine.isEmpty || trimmedLine.startsWith('#')) {
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
      if (trimmedLine.startsWith('[') && trimmedLine.endsWith(']')) {
        currentSection = trimmedLine.substring(1, trimmedLine.length - 1);
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (trimmedLine.contains('=')) {
        final parts = trimmedLine.split('=');
        if (parts.length >= 2) {
          final key = parts[0].trim();
          final value = parts.sublist(1).join('=').trim();
          result[key] = value;
        }
      }
    }
    
    return result;
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ WireGuard –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  void _startWireGuardStatusMonitoring() {
    _statusTimer?.cancel();
    
    int upload = 0;
    int download = 0;
    
    _statusTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!_isConnected) {
        timer.cancel();
        return;
      }
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ NetworkExtension)
      upload += (50 + (DateTime.now().millisecond % 200)) * 1024; // –±–∞–π—Ç—ã
      download += (100 + (DateTime.now().millisecond % 500)) * 1024; // –±–∞–π—Ç—ã
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      final duration = _connectionStartTime != null 
          ? DateTime.now().difference(_connectionStartTime!)
          : Duration.zero;
      
      final hours = duration.inHours;
      final minutes = duration.inMinutes % 60;
      final seconds = duration.inSeconds % 60;
      final durationString = '${hours.toString().padLeft(2, '0')}:'
                           '${minutes.toString().padLeft(2, '0')}:'
                           '${seconds.toString().padLeft(2, '0')}';
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      statusNotifier.value = V2RayStatus(
        state: "CONNECTED",
        duration: durationString,
        uploadSpeed: 50 + (DateTime.now().millisecond % 200), // –ö–ë/—Å
        downloadSpeed: 100 + (DateTime.now().millisecond % 500), // –ö–ë/—Å
        upload: upload,
        download: download,
      );
    });
  }
  
  /// –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é V2Ray –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
  String _createTestV2RayConfig(String host, int port) {
    return '''{
      "log": {
        "loglevel": "warning"
      },
      "inbounds": [
        {
          "tag": "socks",
          "port": 10808,
          "listen": "127.0.0.1",
          "protocol": "socks",
          "settings": {
            "auth": "noauth",
            "udp": true
          }
        }
      ],
      "outbounds": [
        {
          "tag": "proxy",
          "protocol": "socks",
          "settings": {
            "servers": [
              {
                "address": "$host",
                "port": $port
              }
            ]
          }
        }
      ]
    }''';
  }
  
  @override
  void dispose() {
    _statusTimer?.cancel();
    statusNotifier.dispose();
    isConnecting.dispose();
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Map<String, String>? getCurrentConfigInfo() {
    if (_currentConfig == null) return null;
    return parseWireGuardConfig(_currentConfig!);
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  List<String> getServerEndpoints() {
    if (_currentConfig == null) return [];
    
    final config = parseWireGuardConfig(_currentConfig!);
    final endpoint = config['Endpoint'];
    
    return endpoint != null ? [endpoint] : [];
  }
  
  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
  Future<Map<String, dynamic>?> getConnectionStats() async {
    if (!_isConnected) return null;
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    // –∏–∑ NetworkExtension —á–µ—Ä–µ–∑ App Groups –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
    return {
      'connected': true,
      'duration': _connectionStartTime != null 
          ? DateTime.now().difference(_connectionStartTime!).inSeconds
          : 0,
      'endpoint': getCurrentConfigInfo()?['Endpoint'],
    };
  }
}
